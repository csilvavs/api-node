{
  "capabilities": {
    "modules": [
      "puppeteer"
    ],
    "screenshot": ".png",
    "scripts": true,
    "parallel": true,
    "traces": [
      "console",
      "network"
    ]
  },
  "modules": {
    "puppeteer": "C:\\Users\\csilva\\Music\\api-node\\node_modules\\puppeteer"
  },
  "url": "http://localhost:8080/test/unit/unitTests.qunit.html",
  "retry": 0,
  "scripts": [
    "(function () {\n  window['ui5-test-runner/base-host'] = 'http://localhost:8085'\n}())",
    "(function () {\n  'use strict'\n\n  const MODULE = 'ui5-test-runner/post'\n  if (window[MODULE]) {\n    return // already installed\n  }\n\n  const base = window['ui5-test-runner/base-host'] || ''\n  const XHR = window.XMLHttpRequest\n\n  let lastPost = Promise.resolve()\n\n  function isUI5Object (obj) {\n    return typeof obj === 'object' &&\n      obj !== null &&\n      typeof obj.getId === 'function' &&\n      typeof obj.getMetadata === 'function'\n  }\n\n  function stringify (data) {\n    const objects = []\n    const referenced = []\n    const ui5Summary = obj => {\n      const id = obj.getId && obj.getId()\n      const className = obj.getMetadata && obj.getMetadata() && obj.getMetadata().getName()\n      return {\n        'ui5:class': className,\n        'ui5:id': id\n      }\n    }\n    const simple = JSON.stringify(data, function (key, value) {\n      if (typeof value === 'object' && value) {\n        if (isUI5Object(value)) {\n          return ui5Summary(value)\n        }\n        const id = objects.indexOf(value)\n        if (id !== -1) {\n          referenced[id] = true\n          return null // Skip error and check all references\n        }\n        objects.push(value)\n      }\n      return value\n    })\n    if (referenced.length === 0) {\n      return simple\n    }\n    const stringified = []\n    return JSON.stringify(data, function (key, value) {\n      if (typeof value === 'object' && value) {\n        if (isUI5Object(value)) {\n          return ui5Summary(value)\n        }\n        const id = objects.indexOf(value)\n        if (referenced[id]) {\n          if (stringified[id]) {\n            return { 'circular:ref': id }\n          }\n          stringified[id] = true\n          if (Array.isArray(value)) {\n            return {\n              'circular:id': id,\n              'circular:array': [].concat(value) // 'new' object\n            }\n          }\n          return Object.assign({\n            'circular:id': id\n          }, value)\n        }\n      }\n      return value\n    })\n  }\n\n  window['ui5-test-runner/stringify'] = stringify\n\n  const xPageUrl = top.location.toString()\n\n  window[MODULE] = function post (url, data) {\n    function request () {\n      return new Promise(function (resolve, reject) {\n        const xhr = new XHR()\n        xhr.addEventListener('load', () => {\n          resolve(xhr.responseText)\n        })\n        xhr.addEventListener('error', () => {\n          reject(xhr.statusText)\n        })\n        xhr.open('POST', base + '/_/' + url)\n        xhr.setRequestHeader('x-page-url', xPageUrl)\n        xhr.setRequestHeader('content-type', 'application/json')\n        const json = stringify(data)\n        xhr.send(json)\n      })\n    }\n    lastPost = lastPost.then(request)\n    if (!window.__unsafe__) {\n      lastPost = lastPost\n        .then(undefined, function (reason) {\n          console.error('Failed to POST to ' + url + '\\nreason: ' + reason.toString())\n        })\n    }\n    return lastPost\n  }\n}())\n",
    "/* Injected QUnit hooks */\n(function () {\n  'use strict'\n\n  const MODULE = 'ui5-test-runner/qunit-hooks'\n  if (window[MODULE]) {\n    return // already installed\n  }\n  window[MODULE] = true\n\n  const post = window['ui5-test-runner/post']\n\n  function isOpa () {\n    try {\n      return !!window.sap.ui.test.Opa5\n    } catch (e) {\n      return false\n    }\n  }\n\n  function getModules () {\n    if (QUnit.config && QUnit.config.modules) {\n      return QUnit.config.modules.map(({ name, moduleId, tests }) => ({\n        name,\n        moduleId,\n        tests: tests.map(({ name, testId, skip }) => ({ name, testId, skip }))\n      }))\n    }\n    return []\n  }\n\n  function extend (details) {\n    details.isOpa = isOpa()\n    details.modules = getModules()\n    return details\n  }\n\n  function installQUnitHooks () {\n    QUnit.begin(function (details) {\n      details.isOpa = isOpa()\n      return post('QUnit/begin', details)\n    })\n\n    QUnit.testStart(function (details) {\n      return post('QUnit/testStart', extend(details))\n    })\n\n    QUnit.log(function (log) {\n      let ready = false\n      post('QUnit/log', extend(log))\n        .then(undefined, function () {\n          console.error('Failed to POST to QUnit/log (no timestamp)', log)\n        })\n        .then(function () {\n          ready = true\n        })\n      if (isOpa()) {\n        window.sap.ui.test.Opa5.prototype.waitFor({\n          timeout: 10,\n          autoWait: false, // Ignore interactable constraint\n          check: function () {\n            return ready\n          }\n        })\n      }\n    })\n\n    QUnit.testDone(function (report) {\n      return post('QUnit/testDone', report)\n    })\n\n    QUnit.done(function (report) {\n      if (window.__coverage__) {\n        report.__coverage__ = window.__coverage__\n      }\n      return post('QUnit/done', report)\n    })\n  }\n\n  if (typeof window.QUnit !== 'undefined' && QUnit.begin) {\n    installQUnitHooks()\n  } else {\n    let QUnit\n    let install = true\n\n    Object.defineProperty(window, 'QUnit', {\n      get: function () {\n        return QUnit\n      },\n\n      set: function (value) {\n        QUnit = value\n        if (QUnit && QUnit.begin && install) {\n          installQUnitHooks()\n          install = false\n        }\n      }\n    })\n  }\n}())\n"
  ],
  "dir": "C:\\Users\\csilva\\Music\\api-node\\report\\le6KDh_XnDk",
  "args": []
}